{"ast":null,"code":"import requiredArgs from \"../_lib/requiredArgs/index.js\";\nimport getDay from \"../getDay/index.js\";\nimport addDays from \"../addDays/index.js\";\nimport toDate from \"../toDate/index.js\";\nvar baseMap = [7, 6, 5, 4, 3, 2, 1];\n/**\n * @name nextDay\n * @category Weekday Helpers\n * @summary When is the next day of the week?\n *\n * @description\n * When is the next day of the week? 0-6 the day of the week, 0 represents Sunday.\n *\n * @param {Date | number} date - the date to check\n * @param {Day} day - day of the week\n * @returns {Date} - the date is the next day of week\n * @throws {TypeError} - 2 arguments required\n *\n * @example\n * // When is the next Monday after Mar, 20, 2020?\n * const result = nextDay(new Date(2020, 2, 20), 1)\n * //=> Mon Mar 23 2020 00:00:00\n *\n * @example\n * // When is the next Tuesday after Mar, 21, 2020?\n * const result = nextDay(new Date(2020, 2, 21), 2)\n * //=> Tue Mar 24 2020 00:00:00\n */\n\nexport default function nextDay(date, day) {\n  requiredArgs(2, arguments);\n  var map = genMap(day);\n  return addDays(toDate(date), map[getDay(toDate(date))]);\n}\nfunction genMap(daysToMove) {\n  if (daysToMove === 0) {\n    return baseMap;\n  } else {\n    var mapStart = baseMap.slice(-daysToMove);\n    var mapEnd = baseMap.slice(0, baseMap.length - daysToMove);\n    return mapStart.concat(mapEnd);\n  }\n}","map":{"version":3,"names":["requiredArgs","getDay","addDays","toDate","baseMap","nextDay","date","day","arguments","map","genMap","daysToMove","mapStart","slice","mapEnd","length","concat"],"sources":["/home/ugaly/Desktop/semister 2/react-scheduler-demo-standard/node_modules/date-fns/esm/nextDay/index.js"],"sourcesContent":["import requiredArgs from \"../_lib/requiredArgs/index.js\";\nimport getDay from \"../getDay/index.js\";\nimport addDays from \"../addDays/index.js\";\nimport toDate from \"../toDate/index.js\";\nvar baseMap = [7, 6, 5, 4, 3, 2, 1];\n/**\n * @name nextDay\n * @category Weekday Helpers\n * @summary When is the next day of the week?\n *\n * @description\n * When is the next day of the week? 0-6 the day of the week, 0 represents Sunday.\n *\n * @param {Date | number} date - the date to check\n * @param {Day} day - day of the week\n * @returns {Date} - the date is the next day of week\n * @throws {TypeError} - 2 arguments required\n *\n * @example\n * // When is the next Monday after Mar, 20, 2020?\n * const result = nextDay(new Date(2020, 2, 20), 1)\n * //=> Mon Mar 23 2020 00:00:00\n *\n * @example\n * // When is the next Tuesday after Mar, 21, 2020?\n * const result = nextDay(new Date(2020, 2, 21), 2)\n * //=> Tue Mar 24 2020 00:00:00\n */\n\nexport default function nextDay(date, day) {\n  requiredArgs(2, arguments);\n  var map = genMap(day);\n  return addDays(toDate(date), map[getDay(toDate(date))]);\n}\n\nfunction genMap(daysToMove) {\n  if (daysToMove === 0) {\n    return baseMap;\n  } else {\n    var mapStart = baseMap.slice(-daysToMove);\n    var mapEnd = baseMap.slice(0, baseMap.length - daysToMove);\n    return mapStart.concat(mapEnd);\n  }\n}"],"mappings":"AAAA,OAAOA,YAAY,MAAM,+BAA+B;AACxD,OAAOC,MAAM,MAAM,oBAAoB;AACvC,OAAOC,OAAO,MAAM,qBAAqB;AACzC,OAAOC,MAAM,MAAM,oBAAoB;AACvC,IAAIC,OAAO,GAAG,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,eAAe,SAASC,OAAOA,CAACC,IAAI,EAAEC,GAAG,EAAE;EACzCP,YAAY,CAAC,CAAC,EAAEQ,SAAS,CAAC;EAC1B,IAAIC,GAAG,GAAGC,MAAM,CAACH,GAAG,CAAC;EACrB,OAAOL,OAAO,CAACC,MAAM,CAACG,IAAI,CAAC,EAAEG,GAAG,CAACR,MAAM,CAACE,MAAM,CAACG,IAAI,CAAC,CAAC,CAAC,CAAC;AACzD;AAEA,SAASI,MAAMA,CAACC,UAAU,EAAE;EAC1B,IAAIA,UAAU,KAAK,CAAC,EAAE;IACpB,OAAOP,OAAO;EAChB,CAAC,MAAM;IACL,IAAIQ,QAAQ,GAAGR,OAAO,CAACS,KAAK,CAAC,CAACF,UAAU,CAAC;IACzC,IAAIG,MAAM,GAAGV,OAAO,CAACS,KAAK,CAAC,CAAC,EAAET,OAAO,CAACW,MAAM,GAAGJ,UAAU,CAAC;IAC1D,OAAOC,QAAQ,CAACI,MAAM,CAACF,MAAM,CAAC;EAChC;AACF"},"metadata":{},"sourceType":"module"}