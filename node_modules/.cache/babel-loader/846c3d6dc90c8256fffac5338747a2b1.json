{"ast":null,"code":"'use strict';\n\nvar _toConsumableArray = require(\"/home/ugaly/Desktop/semister 2/react-scheduler-demo-standard/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/toConsumableArray.js\").default;\nvar _createForOfIteratorHelper = require(\"/home/ugaly/Desktop/semister 2/react-scheduler-demo-standard/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createForOfIteratorHelper.js\").default;\nvar stringify = require('./lib/stringify');\nvar compile = require('./lib/compile');\nvar expand = require('./lib/expand');\nvar parse = require('./lib/parse');\n\n/**\n * Expand the given pattern or create a regex-compatible string.\n *\n * ```js\n * const braces = require('braces');\n * console.log(braces('{a,b,c}', { compile: true })); //=> ['(a|b|c)']\n * console.log(braces('{a,b,c}')); //=> ['a', 'b', 'c']\n * ```\n * @param {String} `str`\n * @param {Object} `options`\n * @return {String}\n * @api public\n */\n\nvar braces = function braces(input) {\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  var output = [];\n  if (Array.isArray(input)) {\n    var _iterator = _createForOfIteratorHelper(input),\n      _step;\n    try {\n      for (_iterator.s(); !(_step = _iterator.n()).done;) {\n        var pattern = _step.value;\n        var result = braces.create(pattern, options);\n        if (Array.isArray(result)) {\n          var _output;\n          (_output = output).push.apply(_output, _toConsumableArray(result));\n        } else {\n          output.push(result);\n        }\n      }\n    } catch (err) {\n      _iterator.e(err);\n    } finally {\n      _iterator.f();\n    }\n  } else {\n    output = [].concat(braces.create(input, options));\n  }\n  if (options && options.expand === true && options.nodupes === true) {\n    output = _toConsumableArray(new Set(output));\n  }\n  return output;\n};\n\n/**\n * Parse the given `str` with the given `options`.\n *\n * ```js\n * // braces.parse(pattern, [, options]);\n * const ast = braces.parse('a/{b,c}/d');\n * console.log(ast);\n * ```\n * @param {String} pattern Brace pattern to parse\n * @param {Object} options\n * @return {Object} Returns an AST\n * @api public\n */\n\nbraces.parse = function (input) {\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  return parse(input, options);\n};\n\n/**\n * Creates a braces string from an AST, or an AST node.\n *\n * ```js\n * const braces = require('braces');\n * let ast = braces.parse('foo/{a,b}/bar');\n * console.log(stringify(ast.nodes[2])); //=> '{a,b}'\n * ```\n * @param {String} `input` Brace pattern or AST.\n * @param {Object} `options`\n * @return {Array} Returns an array of expanded values.\n * @api public\n */\n\nbraces.stringify = function (input) {\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  if (typeof input === 'string') {\n    return stringify(braces.parse(input, options), options);\n  }\n  return stringify(input, options);\n};\n\n/**\n * Compiles a brace pattern into a regex-compatible, optimized string.\n * This method is called by the main [braces](#braces) function by default.\n *\n * ```js\n * const braces = require('braces');\n * console.log(braces.compile('a/{b,c}/d'));\n * //=> ['a/(b|c)/d']\n * ```\n * @param {String} `input` Brace pattern or AST.\n * @param {Object} `options`\n * @return {Array} Returns an array of expanded values.\n * @api public\n */\n\nbraces.compile = function (input) {\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  if (typeof input === 'string') {\n    input = braces.parse(input, options);\n  }\n  return compile(input, options);\n};\n\n/**\n * Expands a brace pattern into an array. This method is called by the\n * main [braces](#braces) function when `options.expand` is true. Before\n * using this method it's recommended that you read the [performance notes](#performance))\n * and advantages of using [.compile](#compile) instead.\n *\n * ```js\n * const braces = require('braces');\n * console.log(braces.expand('a/{b,c}/d'));\n * //=> ['a/b/d', 'a/c/d'];\n * ```\n * @param {String} `pattern` Brace pattern\n * @param {Object} `options`\n * @return {Array} Returns an array of expanded values.\n * @api public\n */\n\nbraces.expand = function (input) {\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  if (typeof input === 'string') {\n    input = braces.parse(input, options);\n  }\n  var result = expand(input, options);\n\n  // filter out empty strings if specified\n  if (options.noempty === true) {\n    result = result.filter(Boolean);\n  }\n\n  // filter out duplicates if specified\n  if (options.nodupes === true) {\n    result = _toConsumableArray(new Set(result));\n  }\n  return result;\n};\n\n/**\n * Processes a brace pattern and returns either an expanded array\n * (if `options.expand` is true), a highly optimized regex-compatible string.\n * This method is called by the main [braces](#braces) function.\n *\n * ```js\n * const braces = require('braces');\n * console.log(braces.create('user-{200..300}/project-{a,b,c}-{1..10}'))\n * //=> 'user-(20[0-9]|2[1-9][0-9]|300)/project-(a|b|c)-([1-9]|10)'\n * ```\n * @param {String} `pattern` Brace pattern\n * @param {Object} `options`\n * @return {Array} Returns an array of expanded values.\n * @api public\n */\n\nbraces.create = function (input) {\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  if (input === '' || input.length < 3) {\n    return [input];\n  }\n  return options.expand !== true ? braces.compile(input, options) : braces.expand(input, options);\n};\n\n/**\n * Expose \"braces\"\n */\n\nmodule.exports = braces;","map":{"version":3,"names":["_toConsumableArray","require","default","_createForOfIteratorHelper","stringify","compile","expand","parse","braces","input","options","arguments","length","undefined","output","Array","isArray","_iterator","_step","s","n","done","pattern","value","result","create","_output","push","apply","err","e","f","concat","nodupes","Set","noempty","filter","Boolean","module","exports"],"sources":["/home/ugaly/Desktop/semister 2/react-scheduler-demo-standard/node_modules/braces/index.js"],"sourcesContent":["'use strict';\n\nconst stringify = require('./lib/stringify');\nconst compile = require('./lib/compile');\nconst expand = require('./lib/expand');\nconst parse = require('./lib/parse');\n\n/**\n * Expand the given pattern or create a regex-compatible string.\n *\n * ```js\n * const braces = require('braces');\n * console.log(braces('{a,b,c}', { compile: true })); //=> ['(a|b|c)']\n * console.log(braces('{a,b,c}')); //=> ['a', 'b', 'c']\n * ```\n * @param {String} `str`\n * @param {Object} `options`\n * @return {String}\n * @api public\n */\n\nconst braces = (input, options = {}) => {\n  let output = [];\n\n  if (Array.isArray(input)) {\n    for (let pattern of input) {\n      let result = braces.create(pattern, options);\n      if (Array.isArray(result)) {\n        output.push(...result);\n      } else {\n        output.push(result);\n      }\n    }\n  } else {\n    output = [].concat(braces.create(input, options));\n  }\n\n  if (options && options.expand === true && options.nodupes === true) {\n    output = [...new Set(output)];\n  }\n  return output;\n};\n\n/**\n * Parse the given `str` with the given `options`.\n *\n * ```js\n * // braces.parse(pattern, [, options]);\n * const ast = braces.parse('a/{b,c}/d');\n * console.log(ast);\n * ```\n * @param {String} pattern Brace pattern to parse\n * @param {Object} options\n * @return {Object} Returns an AST\n * @api public\n */\n\nbraces.parse = (input, options = {}) => parse(input, options);\n\n/**\n * Creates a braces string from an AST, or an AST node.\n *\n * ```js\n * const braces = require('braces');\n * let ast = braces.parse('foo/{a,b}/bar');\n * console.log(stringify(ast.nodes[2])); //=> '{a,b}'\n * ```\n * @param {String} `input` Brace pattern or AST.\n * @param {Object} `options`\n * @return {Array} Returns an array of expanded values.\n * @api public\n */\n\nbraces.stringify = (input, options = {}) => {\n  if (typeof input === 'string') {\n    return stringify(braces.parse(input, options), options);\n  }\n  return stringify(input, options);\n};\n\n/**\n * Compiles a brace pattern into a regex-compatible, optimized string.\n * This method is called by the main [braces](#braces) function by default.\n *\n * ```js\n * const braces = require('braces');\n * console.log(braces.compile('a/{b,c}/d'));\n * //=> ['a/(b|c)/d']\n * ```\n * @param {String} `input` Brace pattern or AST.\n * @param {Object} `options`\n * @return {Array} Returns an array of expanded values.\n * @api public\n */\n\nbraces.compile = (input, options = {}) => {\n  if (typeof input === 'string') {\n    input = braces.parse(input, options);\n  }\n  return compile(input, options);\n};\n\n/**\n * Expands a brace pattern into an array. This method is called by the\n * main [braces](#braces) function when `options.expand` is true. Before\n * using this method it's recommended that you read the [performance notes](#performance))\n * and advantages of using [.compile](#compile) instead.\n *\n * ```js\n * const braces = require('braces');\n * console.log(braces.expand('a/{b,c}/d'));\n * //=> ['a/b/d', 'a/c/d'];\n * ```\n * @param {String} `pattern` Brace pattern\n * @param {Object} `options`\n * @return {Array} Returns an array of expanded values.\n * @api public\n */\n\nbraces.expand = (input, options = {}) => {\n  if (typeof input === 'string') {\n    input = braces.parse(input, options);\n  }\n\n  let result = expand(input, options);\n\n  // filter out empty strings if specified\n  if (options.noempty === true) {\n    result = result.filter(Boolean);\n  }\n\n  // filter out duplicates if specified\n  if (options.nodupes === true) {\n    result = [...new Set(result)];\n  }\n\n  return result;\n};\n\n/**\n * Processes a brace pattern and returns either an expanded array\n * (if `options.expand` is true), a highly optimized regex-compatible string.\n * This method is called by the main [braces](#braces) function.\n *\n * ```js\n * const braces = require('braces');\n * console.log(braces.create('user-{200..300}/project-{a,b,c}-{1..10}'))\n * //=> 'user-(20[0-9]|2[1-9][0-9]|300)/project-(a|b|c)-([1-9]|10)'\n * ```\n * @param {String} `pattern` Brace pattern\n * @param {Object} `options`\n * @return {Array} Returns an array of expanded values.\n * @api public\n */\n\nbraces.create = (input, options = {}) => {\n  if (input === '' || input.length < 3) {\n    return [input];\n  }\n\n return options.expand !== true\n    ? braces.compile(input, options)\n    : braces.expand(input, options);\n};\n\n/**\n * Expose \"braces\"\n */\n\nmodule.exports = braces;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}